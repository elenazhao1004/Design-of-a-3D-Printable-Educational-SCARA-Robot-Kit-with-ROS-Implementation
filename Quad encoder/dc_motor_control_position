/*
 * Title: DC Motor Quadencoder Position Control 
 * Written by: Andres Cuenca
 * Objective: Set a setpoint value measured in degrees, and have DC motor  
 * turn to desire final position. The program will measure the time, position (radians)
 * revolution per min (RPM)
 */


const byte PWMPin = 6; //pin for Arduino PWM, connect from H-Bridge
const byte DirPin1 = 7; // digital pin 7, connect from H-Bridge
const byte DirPin2 = 8; //digital pin 8, connect from H-Bridge

const byte interruptPinA = 2; //Connect to Quadencoder
const byte interruptPinB = 3; //connect to quadencoder
volatile long EncoderCount = 0; //set encodercount to zero

//Parameters for Quadencoder
float rev; 
float rad; 
float RPM = 0.0;
float  rev_prev = 0.0;
unsigned long t;
unsigned long t_prev = 0;
int dt;
int dt_desired = 100;
float CountPerRev = 484; //Input volt. 12V will run at 600rpm with this const. value 


double setpoint = 400; //degrees

//PID Constants: KP, KI, KD
double Kp = .1;
double Ki = 0.01;
double Kd = 0.001;

float last_error = 0;
float error = 0;
float changeError = 0;
float totalError = 0;
float pidTerm = 0;
float scale_PID = 0;// Scale down PWM if value is higher than 255


void setup() {
  Serial.begin(9600);
  Serial.print("Time (sec), Position(Radians), Velocity (RPM)");

  
  pinMode(PWMPin,OUTPUT); //PWM pin for desire position and compute error
  pinMode(DirPin1, OUTPUT);
  pinMode(DirPin2, OUTPUT);
  pinMode(interruptPinA, INPUT_PULLUP);
  pinMode(interruptPinB, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(interruptPinA), ISR_EncoderA, CHANGE); //interrupt pins for quadencoder
  attachInterrupt(digitalPinToInterrupt(interruptPinB), ISR_EncoderB, CHANGE);

}

void loop(){
  t = millis(); 
   
  rev = EncoderCount/CountPerRev;
  rad = (EncoderCount/CountPerRev)*6.28;  // Angle in revolution to radians
  
  PIDcalculation(rad);// find PID value, send rad value as parameter 
  dt = (t - t_prev); //change of time
  RPM = (rev - rev_prev) / (dt / 1000.0) * 60; // rev/min
  t_prev = t; //set previous time to current time
  rev_prev = rev; //set previous revolution, to current revolution

  
  if (rad < setpoint) {
    digitalWrite(DirPin1, LOW);// Forward motion
    digitalWrite(DirPin2, HIGH);
  } else {
    digitalWrite(DirPin1, HIGH);//Reverse motion
    digitalWrite(DirPin2, LOW);
  }

  analogWrite(PWMPin, scale_PID ); //send PWM to Arduino 
  
  
  Serial.print(t/1000.0); Serial.print("\t"); //time
  Serial.print(rad); Serial.print("\t"); //theta radians
  Serial.println(RPM); //velocity, rev/min

  delay(100);
}

void PIDcalculation(float rad){
  
  error = setpoint - rad;
  
  changeError = error - last_error; // derivative term
  totalError += error; //accumalate errors to find integral term
  pidTerm = (Kp * error) + (Ki * totalError) + (Kd * changeError);//total gain
  pidTerm = constrain(pidTerm, -255, 255);//constraining to appropriate value
  scale_PID = abs(pidTerm);//make sure it's a positive value

  last_error = error;
}
  
/* QuadEncoder Count Functions */ 
/* -------------------------------*/ 
void ISR_EncoderA() {
  bool PinB = digitalRead(interruptPinB);
  bool PinA = digitalRead(interruptPinA);
  if (PinB == LOW) {
    if (PinA == HIGH) {
      EncoderCount++;
    }
    else {
      EncoderCount--;
    }
  }
  else {
    if (PinA == HIGH) {
      EncoderCount--;
    }
    else {
      EncoderCount++;
    }
  }
}

void ISR_EncoderB() {
  bool PinA = digitalRead(interruptPinA);
  bool PinB = digitalRead(interruptPinB);
  if (PinA == LOW) {
    if (PinB == HIGH) {
      EncoderCount--;
    }
    else {
      EncoderCount++;
    }
  }
  else {
    if (PinB == HIGH) {
      EncoderCount++;
    }
    else {
      EncoderCount--;
    }
  }
}
